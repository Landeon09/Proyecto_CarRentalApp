name: ci

on:
  push:
    branches: [landeon2_screens] # Nombre de la rama

jobs:
  build:
    name: Build Project
    runs-on: ubuntu-latest
    env: 
      EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
      WHATSAPP_API_URL: ${{ secrets.WHATSAPP_API_URL }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    steps:
      # Descargar el c√≥digo fuente
      - name: üèó Download source code
        uses: actions/checkout@v3

      # Configurar Node.js
      - name: üèó Configure Node
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: npm

      # Configurar Expo
      - name: üèó Configure Expo
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      # Crear un archivo .npmrc para forzar legacy-peer-deps
      - name: üìù Configure npm
        run: echo "legacy-peer-deps=true" >> ~/.npmrc

      # Instalar dependencias
      - name: üì¶ Install dependencies
        run: npm install

      # Ejecutar pruebas unitarias
      - name: üß™ Run unit tests
        run: npm test

      # # Configurar SonarQube Scanner con Java 17
      # - name: üîç Configure Java for SonarQube
      #   uses: actions/setup-java@v3
      #   with:
      #     distribution: 'temurin'
      #     java-version: '17'

      # # Iniciar el servidor de SonarQube usando Docker
      # - name: üõ† Start SonarQube Server
      #   run: |
      #     docker run -d --name sonarqube -p 9000:9000 sonarqube:community
      #     sleep 30  # Esperar a que el servidor est√© listo

      # # Verificar que el servidor de SonarQube est√© activo
      # - name: üõ† Verify SonarQube is running
      #   run: |
      #     curl -I http://localhost:9000 || exit 1

      # # Escanear c√≥digo con SonarQube
      # - name: üîç Run SonarQube Analysis
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #   run: |
      #     npm install -g sonarqube-scanner --legacy-peer-deps
      #     sonar-scanner \
      #       -Dsonar.projectKey=CarlRental_Appv1 \
      #       -Dsonar.sources=./ \
      #       -Dsonar.host.url=http://localhost:9000 \
      #       -Dsonar.token=${SONAR_TOKEN} \
      #       -Dsonar.exclusions=**/__test__/**

      #Clean Credential
       - name: Clean Credentials
         run: sed -i 's/API_KEY_CREDENTIAL/${{ env.API_KEY_CREDENTIAL }}/g' firebase-config.js 
      # Desplegar preview en Expo
      - name: üöÄ Deploy to Expo Preview
        run: eas update --auto --non-interactive

      # Notificaci√≥n por WhatsApp (opcional) 
      - name: üì≤ Notify on WhatsApp
        if: success()
        env:
          ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID }}
          AUTH_TOKEN: ${{ secrets.TWILIO_AUTH_TOKEN }}
        run: |
          curl 'https://api.twilio.com/2010-04-01/Accounts/AC11c4d3a75c4468650fa267d6071e3904/Messages.json' -X POST \
          --data-urlencode 'To=whatsapp:+51951664953' \
          --data-urlencode 'From=whatsapp:+14155238886' \
          --data-urlencode 'ContentSid=HXb5b62575e6e4ff6129ad7c8efe1f983e' \
          --data-urlencode 'ContentVariables={"1":"El despliegue y las pruebas unitarias se completaron con √©xito. ","2":"Felicidades!!!!"}' \
          -u "${ACCOUNT_SID}:${AUTH_TOKEN}"
